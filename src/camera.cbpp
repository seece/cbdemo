//See src\camera.cbml for source#define SET_CAMERA_VARS( _prefix1)  _prefix1 ## cDist#=-track_values_smooth(0)*20 :  _prefix1 ## cAng#=track_values_smooth(1)*700 :  _prefix1 ## cRot#=track_values_smooth(2)*700 :  _prefix1 ## cAlt#=track_values_smooth(3)*10-5 :  _prefix1 ## cPitch#=track_values_smooth(4)*700 :  _prefix1 ## cRoll#=track_values_smooth(5)*700 :  _prefix1 ## cX#=track_values_smooth(6)*50 :  _prefix1 ## cY#=track_values_smooth(7)*50 :  _prefix1 ## cZ#=track_values_smooth(8)*-50 :  _prefix1 ## cFog#=track_values(9)+0.1 :  _prefix1 ## shipX#=track_values(10)*50 :  _prefix1 ## shipY#=track_values(11)*50 :  _prefix1 ## shipZ#=track_values(12)*50 :  _prefix1 ## gRough#=track_values(13)*0.5#define RENDER_OBJECT( _obj,_prefix1,_rendersub)  _prefix1 ## mx=peekInt(_obj,0) :  _prefix1 ## my=peekInt(_obj,4) :  _prefix1 ## mz=peekInt(_obj,8) :  _prefix1 ## size=MEMBlockSize( _prefix1 ## mx) :  _prefix1 ## cX#+  _prefix1 ## shipX :  _prefix1 ## cY#+  _prefix1 ## shipY :  _prefix1 ## cZ#+  _prefix1 ## shipZ : for  _prefix1 ## i=0 to  _prefix1 ## size-8 step 8 : px#=peekFloat( _prefix1 ## mx, _prefix1 ## i) : py#=peekFloat( _prefix1 ## my, _prefix1 ## i) : pz#=peekFloat( _prefix1 ## mz, _prefix1 ## i) :  _prefix1 ## i2= _prefix1 ## i+4 : px2#=peekFloat( _prefix1 ## mx, _prefix1 ## i2) : py2#=peekFloat( _prefix1 ## my, _prefix1 ## i2) : pz2#=peekFloat( _prefix1 ## mz, _prefix1 ## i2) : gosub _rendersub : next  _prefix1 ## i#define RENDER_OBJECT_SCALED( _obj,_prefix1,_rendersub,_sx,_sy,_sz)  _prefix1 ## mx=peekInt(_obj,0) :  _prefix1 ## my=peekInt(_obj,4) :  _prefix1 ## mz=peekInt(_obj,8) :  _prefix1 ## size=MEMBlockSize( _prefix1 ## mx) :  _prefix1 ## cX#+  _prefix1 ## shipX :  _prefix1 ## cY#+  _prefix1 ## shipY :  _prefix1 ## cZ#+  _prefix1 ## shipZ : for  _prefix1 ## i=0 to  _prefix1 ## size-8 step 8 : px#=peekFloat( _prefix1 ## mx, _prefix1 ## i)*_sx : py#=peekFloat( _prefix1 ## my, _prefix1 ## i)*_sy : pz#=peekFloat( _prefix1 ## mz, _prefix1 ## i)*_sz :  _prefix1 ## i2= _prefix1 ## i+4 : px2#=peekFloat( _prefix1 ## mx, _prefix1 ## i2)*_sx : py2#=peekFloat( _prefix1 ## my, _prefix1 ## i2)*_sy : pz2#=peekFloat( _prefix1 ## mz, _prefix1 ## i2)*_sz : gosub _rendersub : next  _prefix1 ## i#define KAMERA( _prefix1,_prefix2,_prefix3)  _prefix2 ## px#=  _prefix3 ## px#+cos( _prefix1 ## cAng#-90)* _prefix1 ## cDist#+ _prefix1 ## cX# :  _prefix2 ## pz#=  _prefix3 ## pz#-sin( _prefix1 ## cAng#-90)* _prefix1 ## cDist#+ _prefix1 ## cZ# :  _prefix2 ## py#=  _prefix3 ## py#+ _prefix1 ## cAlt#+ _prefix1 ## cY# :  _prefix1 ## a#=-getAngle(0,0,  _prefix2 ## px#,  _prefix2 ## pz#) :  _prefix1 ## d#=-distance(0,0,  _prefix2 ## px#,  _prefix2 ## pz#) :  _prefix2 ## px#=cos( _prefix1 ## a#+ _prefix1 ## cAng#)* _prefix1 ## d# :  _prefix2 ## pz#=-sin( _prefix1 ## a#+ _prefix1 ## cAng#)* _prefix1 ## d# :  _prefix1 ## a#=getAngle(0,0,  _prefix2 ## px#,  _prefix2 ## pz#) :  _prefix1 ## d#=distance(0,0,  _prefix2 ## px#,  _prefix2 ## pz#) :  _prefix2 ## px#=cos( _prefix1 ## a#+ _prefix1 ## cRot#)* _prefix1 ## d# :  _prefix2 ## pz#=-sin( _prefix1 ## a#+ _prefix1 ## cRot#)* _prefix1 ## d# :  _prefix1 ## a#=getAngle(0,0,  _prefix2 ## pz#,  _prefix2 ## py#) :  _prefix1 ## d#=distance(0,0,  _prefix2 ## pz#,  _prefix2 ## py#) :  _prefix2 ## pz#=cos( _prefix1 ## a#+ _prefix1 ## cPitch#)* _prefix1 ## d# :  _prefix2 ## py#=-sin( _prefix1 ## a#+ _prefix1 ## cPitch#)* _prefix1 ## d# :  _prefix1 ## a#=getAngle(0,0,  _prefix2 ## px#,  _prefix2 ## py#) :  _prefix1 ## d#=distance(0,0,  _prefix2 ## px#,  _prefix2 ## py#) :  _prefix2 ## px#=cos( _prefix1 ## a#+ _prefix1 ## cRoll#)* _prefix1 ## d# :  _prefix2 ## py#=-sin( _prefix1 ## a#+ _prefix1 ## cRoll#)* _prefix1 ## d##define _DOT( _prefix1,_prefix2) KAMERA( _prefix1 ## , _prefix2 ## , _prefix2 ## ) : color 200,200,200 : pd#=A_DIST( _prefix2 ## px#, _prefix2 ## py#, _prefix2 ## pz#) : dot  _prefix2 ## px/ _prefix2 ## pd*180.0+160, _prefix2 ## py/ _prefix2 ## pd*180.0+90#define LINE_WITH_FOG( _prefix1,_prefix2,_prefix3) KAMERA( _prefix1 ## ,lwft1_, _prefix2 ## ) : KAMERA( _prefix1 ## ,lwft2_, _prefix3 ## ) : pd#= A_DIST(lwft1_px#,lwft1_py#,lwft1_pz#) : pd2#= A_DIST(lwft2_px#,lwft2_py#,lwft2_pz#) : _d#=(pd+pd2)*2.0* _prefix1 ## cFog : color a_clampc(200/_d*2-_d),a_clampc( _prefix1 ## g/_d*2-_d),a_clampc( _prefix1 ## b/_d*2-_d) : if lwft1_pz<0.2 and lwft2_pz<0.2 then line lwft1_px/pd#*180.0+160,lwft1_py/pd#*180.0+90,lwft2_px/pd2#*180.0+160,lwft2_py/pd2#*180.0+90#define A_DIST( __px,__py,__pz) (sqrt(( __px)^2+( __py)^2+( __pz)^2))#define A_SMART_LINE_MAKRO( _linemacro) _px#=px : _py#=py : _pz#=pz : _s_d#=a_dist(px-px2,py-py2,pz-pz2)*6.0 : px#=(px#+px2#)/2.0 : py#=(py#+py2#)/2.0 : pz#=(pz#+pz2#)/2.0 : gosub a_kamera : _s_d=roundup(_s_d/(a_dist(px,py,pz)^2*0.2+0.5)+1) : if _s_d>1 then : _dx#=(px2-_px)/_s_d : _dy#=(py2-_py)/_s_d : _dz#=(pz2-_pz)/_s_d : _s_px#=_px : _s_py#=_py : _s_pz#=_pz : for _s_i=1 to _s_d-1 : _px2#=_s_px+_dx*_s_i : _py2#=_s_py+_dy*_s_i : _pz2#=_s_pz+_dz*_s_i : _s_i2=_s_i+1 : gosub _s_a_temple_line_with_fog : _px=_s_px+_dx*_s_i2 : _py=_s_py+_dy*_s_i2 : _pz=_s_pz+_dz*_s_i2 : gosub _s_a_temple_line_with_fog : next _s_i : else : px=_px : py=_py : pz=_pz : gosub temple_line_with_fog : endif#define LINE_WITH_FOG_MAKRO( _prefix1) pd#=a_dist( _prefix1 ## px#, _prefix1 ## py#, _prefix1 ## pz#) : pd2#=a_dist(px2#,py2#,pz2#) : _d#=(pd+pd2)*2.0*a_cFog : color a_clampc(a_r/_d*2-_d),a_clampc(a_g/_d*2-_d),a_clampc(a_b/_d*2-_d) : if  _prefix1 ## pz<0.2 and pz2<0.2 then line  _prefix1 ## px/pd#*180.0+160, _prefix1 ## py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90#define LINE_WITH_FOG_GRADIENT_MAKRO( _prefix1) pd#=a_dist( _prefix1 ## px#, _prefix1 ## py#, _prefix1 ## pz#) : pd2#=a_dist(px2#,py2#,pz2#) : _d#=(pd+pd2)*2.0*a_cFog : color a_clampc(a_r/_d*2-_d),a_clampc(lerp(a_g, 200,  _prefix1 ## py/10.0)/_d*2-_d),a_clampc(a_b/_d*2-_d) : if  _prefix1 ## pz<0.2 and pz2<0.2 then line  _prefix1 ## px/pd#*180.0+160, _prefix1 ## py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90#define TEMPLE_SMART_LINE_MAKRO( _prefix1) _px#=px : _py#=py : _pz#=pz : _s_d#=a_dist(px-px2,py-py2,pz-pz2)*6.0 : px#=(px#+px2#)/2.0 : py#=(py#+py2#)/2.0 : pz#=(pz#+pz2#)/2.0 : gosub a_kamera : _s_d=roundup(_s_d/(a_dist(px,py,pz)^2*0.2+0.5)+1) : if _s_d>1 then : _dx#=(px2-_px)/_s_d : _dy#=(py2-_py)/_s_d : _dz#=(pz2-_pz)/_s_d : _s_px#=_px : _s_py#=_py : _s_pz#=_pz : for _s_i=1 to _s_d-1 : _px2#=_s_px+_dx*_s_i : _py2#=_s_py+_dy*_s_i : _pz2#=_s_pz+_dz*_s_i : _s_i2=_s_i+1 : gosub _s_a_line_with_fog : _px=_s_px+_dx*_s_i2 : _py=_s_py+_dy*_s_i2 : _pz=_s_pz+_dz*_s_i2 : gosub _s_a_line_with_fog : next _s_i : else : px=_px : py=_py : pz=_pz : gosub a_line_with_fog : endifmakeError "include src\camera.cbpp with #include"