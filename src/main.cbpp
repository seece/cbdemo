// options
#define USE_EDITOR
#define EDITOR_HEIGHT 200
#define SEEK_SPEED 0.4

// macros
#define malloc(size) makeMEMBlock(size)
#define free deleteMEMBlock
#define realloc resizeMEMBlock
#define toType(integer) convertToType(integer)
#define toInt(typevar) convertToInteger(typevar)
#define assert(statement) If Not (statement) Then makeError __LINE__ + ": assertion failed"

#define frac(_var) (_var-roundDown(_var))
#define round(_val) ()
#define lerp(_val1, _val2, _amount) (_val1 + (_val2 - _val1) * _amount)
#define barsToSecs(_bars, _tempo) (_bars * ((60.0/_tempo)*4.0))
#define snapToGrid(_value, _size) (int(_value/_size)*_size)
#define clamp(_val) (max(0.0,min(1.0, _val)))

#define mouseOverlap(_x,_y,_w,_h) (mouseX() >= (_x) and mouseX() <= ((_x) + (_w)) and mouseY() >= (_y) and mouseY() <= ((_y) + (_h)))
#define toggle(x) (x xor 1)

#define POINT_STRIDE 8
#define UNDEFINED -1


include "inc/editor.cb"

const SCREEN_WIDTH = 640
const SCREEN_HEIGHT = 480
#define PICTURE_WIDTH SCREEN_WIDTH
#define PICTURE_HEIGHT (int(SCREEN_WIDTH * (9.0/16.0)))

#ifdef USE_EDITOR
SCREEN SCREEN_WIDTH, SCREEN_HEIGHT + EDITOR_HEIGHT, 0, 1
#else
SCREEN SCREEN_WIDTH, SCREEN_HEIGHT, 0, 1
#endif
frameLimit 60

buffer=makeImage(PICTURE_WIDTH, PICTURE_HEIGHT) // kuvasuhde 16:9

#ifdef USE_EDITOR
	font = loadFont("tahoma", 14)
	setFont font

	editorp = createEnvEditor(0, PICTURE_HEIGHT, SCREEN_WIDTH, EDITOR_HEIGHT-24, 0.0, 10.0)
	editor.EnvEditor = toType(editorp)
#endif

gosub trackInit
gosub main
end

timeInit:
	tstart=timer()
	pause_start=timer()
	pause_offset# = 0.0
	time_offset# = 0.0
	
	playing = true
	t# = 0.0
	bars# = 0.0
return

trackInit:
	const TRACK_AMOUNT = 8
	dim tracks(TRACK_AMOUNT)	// an array of track pointers
	dim track_values(TRACK_AMOUNT) as float
	
	for i=0 to TRACK_AMOUNT
		tracks(i) = createSyncTrack("synctrack #" + i )
		
		track.SyncTrack = toType(tracks(i))
		
		point.Envpoint = new (Envpoint)	// only a temporary var
		point\bars = 0.0
		point\value = 0.0
		addEnvelopePoint(tracks(i), toInt(point), track\count)
		//addEnvelopePoint(tracks(i), toInt(point), track\count)
		delete point
	next i
	
	#ifdef USE_EDITOR
	editor\track = tracks(0)
	#endif
return	

main:
	tempo# = 130.0
	gosub timeInit
	
	repeat
		//t# = (float(timer())-float(start_time)) / 1000.0
		gosub updateTime

		setWindow "t: " + t#

		gosub updateTracks
		
		drawToImage buffer
		gosub drawDemo
		drawToScreen
		
		gosub drawBuffer
		
		#ifdef USE_EDITOR
			gosub updateEditor
		#endif
		
		drawScreen
	forever
return

updateTracks:
	for i=0 to TRACK_AMOUNT
		track_values(i) = getEnvelopeValue(tracks(i), bars)
	next i
return

#ifdef USE_EDITOR
updateEditor:
	bars# = updateEditor(toInt(editor), bars) // the editor processes looping
	newbars# = drawEditorTimeline(toInt(editor), bars)
	
	if newbars <> bars then
		diff# = newbars - bars
		bar_offset# = bar_offset + diff
		time_offset# = barsToSecs(bar_offset, tempo)
	endif
	
	drawEditor(toInt(editor), bars)
	
return
#endif

updateTime:
	#ifdef USE_EDITOR
		gosub updateTimeHotkeys
	#endif	
	
	if playing then
	
	else
		pause_offset# = -(timer()-pause_start)/1000.0
	endif
	
	t# = pause_offset + time_offset + float(timer() - tstart)/1000.0
	
	beats# = (t/60.0)*(tempo)
	bars# = beats/4.0 
return

#ifdef USE_EDITOR
updateTimeHotkeys:
	if keyHit(cbKeyBackspace) then
		time_offset = 0.0
		pause_offset = 0.0
		t# = 0.0
		pause_start = timer()
		tstart = timer()
	endif

	if keyHit(cbKeySpace) then 
		if playing then
			playing = false
			pause_start = timer()
		else
			time_offset = time_offset + pause_offset
			pause_offset = 0.0
			playing = true
		endif
	endif
	
	if keyDown(cbKeyRight) then
		time_offset = time_offset + SEEK_SPEED
	elseIf keyDown(cbKeyLeft) then
		time_offset = time_offset - SEEK_SPEED
	endif	
return
#endif

drawBuffer:
	#ifdef USE_EDITOR
		drawImage buffer, 0, 0
	#else
		drawImage buffer, 0, (screenHeight()-PICTURE_HEIGHT)/2
	#endif
	
return

drawDemo:
	color 255, 0, 0
	box 0,0,640,480,1
return
