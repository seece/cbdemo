//#pragma dumb_debug
#pragma anticrap
//#define RELEASE

#include "stdlib.cbpp"
#include "camera.cbpp"

#define drawToBuffer drawToImage gBuffer
//#define drawToBuffer drawToScreen
//clamppi väreille niin että musta on 20
#define a_clampc(_cval) (max(20,min(255, _cval))) 

// _RELEASE is a flag set by the precompiler
#ifdef _RELEASE
	#define RELEASE
#endif

#ifdef RELEASE
	gWindowMode = 1
    SCREEN 240,160
    setWindow "Linear Minds"
    
    full = 0
    showfps = 0
    repeat
        if mouseHit(1) then
            if boxOverlap(mouseX(),mouseY(),1,1,45,25,130,20) then full = not full
            if boxOverlap(mouseX(),mouseY(),1,1,60,105,120,30) then exit
        endif
        text 50,30,"Fullscreen"
        box 160,32,10,10,0
        if full then box 162,34,6,6,1
        text 50,70,"Antialias"
        color 100, 100, 100
        box 160,72,10,10,0
        color 255, 255, 255
        centerText 120,120,"LINEARIZE",2
        box 60,105,120,30,0
        drawScreen
    forever
    if full then gWindowMode = 0
#endif

global MUSIC_PATH$
MUSIC_PATH = "assets/musa.mp3"
global tempo#
global gCurrentScene$
tempo = 100.0
TRACK_AMOUNT = 19
frameLimit 60

// SCENE LOADING
global gSceneAmount

scenelistpath$ = "sync/scenes.txt" 
gSceneAmount = countFileRows(scenelistpath)
assert(gSceneAmount > 0)
dim scene_names(gSceneAmount-1) as string
dim scene_start(gSceneAmount-1) as float
loadScenes(scenelistpath)

global imgGarbage	


#ifdef RELEASE
include "inc/editor_release.cb"
#else
include "inc/editor_debug.cb"
#endif

include "inc/objloader.cb"
include "inc/garbage.cb"	// compiled from effects/garbage.cbpp

demoInit:
	setWindow "peisik demo"

	gTrackNames =  "cDist|cAng|cRot|cAlt|cPitch|cRoll|cX|cY|cZ|fogDist|shipX|shipY|shipZ|gRoug|14|sclY|ovrX|ovrY|fade"
	#define TRACK_GROUND_ROUGHNESS 13
	#define TRACK_SCALE_Y 15
	#define TRACK_OVERLAY_X 16
	#define TRACK_OVERLAY_Y 17	
	#define TRACK_FADE 18

	#ifndef RELEASE
		gResetFoobar = true
	#endif
	
	shipobj = loadWavefrontObj("assets/obj/shup2.obj")
	templeobj = loadWavefrontObj("assets/obj/temple.obj")
	house1obj = loadWavefrontObj("assets/obj/hus1_1.obj")
	house2obj = loadWavefrontObj("assets/obj/hus2_1.obj")
	
	#define flipImageHoriz(_img) resizeImage _img, -imageWidth(_img), imageHeight(_img)
	
	dim imgUkot(4)
	imgUkot(0) = loadImage("assets/gfx/ukko1.png")
	imgUkot(1) = loadImage("assets/gfx/ukko2.png")
	imgUkot(2) = cloneImage(imgUkot(0))  : flipImageHoriz(imgUkot(2))
	imgUkot(3) = cloneImage(imgUkot(1)) : flipImageHoriz(imgUkot(3))
	
	
	imgSmallLogo = loadImage("assets/gfx/logo1.png")
	imgRealtime = loadImage("assets/gfx/text_realtime.png")
	imgSimulation = loadImage("assets/gfx/text_simulation.png")
	imgDemoLogo = loadImage("assets/gfx/demoname.png")
	imgDemoLogoBg = loadImage("assets/gfx/demoname_bg.png")
	maskImage imgDemoLogo, 255, 0, 255 : maskImage imgDemoLogoBg, 255, 0, 255
	imgWeGreet = loadImage("assets/gfx/text_wegreet.png")
	imgSplash = loadImage("assets/gfx/splash.png")
	imgTimblex = loadImage("assets/gfx/text_timblex.png")
	imgCb2 = loadImage("assets/gfx/text_cb2.png")
	imgFadeMask = makeImage(320, 240)
	
	trhProbTable = malloc(128*128*4)
	loadProbTable("assets/table.dat", trhProbTable)
	drawToWorld OFF, OFF, OFF
	imgGarbage = makeImage(320,360*4)

	consolefont =  loadFont("consolas", 12)
	setFont consolefont
	randomize 77
	makeGarbageImage(imgGarbage, trhProbTable, 0)
	randomize timer()
	free trhProbTable
	
	#define FEEDBACK_WIDTH 320
	#define FEEDBACK_HEIGHT 180
	
	gosub initFeedback
    gosub initParticleup
	gosub initTorus
    gosub initMoire
return

initTorus:

    const ires# = 17.0
    const jres# = 9.0
    
    dim torus(roundDown(ires*jres*2-1),2,2) as float
    
    for jj = 0 to jres-1
        j = int((jres+roundDown((jj+1)/2)*(-1)^jj) mod jres)
        for i = 0 to ires-1
            
            torus(p,0,0) = cos(i/ires*360.0)*(2-cos(j/jres*360.0))
            torus(p,0,1) = sin(j/jres*360.0)
            torus(p,0,2) =-sin(i/ires*360.0)*(2-cos(j/jres*360.0))
            
            torus(p,1,0) = cos((i+1)/ires*360.0)*(2-cos(j/jres*360.0))
            torus(p,1,1) = sin(j/jres*360.0)
            torus(p,1,2) =-sin((i+1)/ires*360.0)*(2-cos(j/jres*360.0))
            
            torus(p,2,0) = cos(i/ires*360.0)*(2-cos((j+1)/jres*360.0))
            torus(p,2,1) = sin((j+1)/jres*360.0)
            torus(p,2,2) =-sin(i/ires*360.0)*(2-cos((j+1)/jres*360.0))
            
            p = p + 1
            
            torus(p,0,0) = cos((i+1)/ires*360.0)*(2-cos(j/jres*360.0))
            torus(p,0,1) = sin(j/jres*360.0)
            torus(p,0,2) =-sin((i+1)/ires*360.0)*(2-cos(j/jres*360.0))
            
            torus(p,2,0) = cos(i/ires*360.0)*(2-cos((j+1)/jres*360.0))
            torus(p,2,1) = sin((j+1)/jres*360.0)
            torus(p,2,2) =-sin(i/ires*360.0)*(2-Cos((j+1)/jres*360.0))
            
            torus(p,1,0) = cos((i+1)/ires*360.0)*(2-Cos((j+1)/jres*360.0))
            torus(p,1,1) = sin((j+1)/jres*360.0)
            torus(p,1,2) =-sin((i+1)/ires*360.0)*(2-cos((j+1)/jres*360.0))
            
            p = p + 1
            
        next i
    next jj
    
return

initMoire:
    dim imgs(6), pc#(3)
    for i = 0 to 6
        imgs(i) = makeImage(640-320*(i>1), 360-180*(i>1))
        If i<>1 then maskImage imgs(i), 255, 0, 255
        If i=3 then maskImage(imgs(i)), 255, 255, 255
        If i=4 or i = 6 then maskImage imgs(i),0,0,0
        If i<2 then
            drawToImage imgs(i)
            lock image(imgs(i))
            For j = 0 to 639
                for k = 0 to 359
                    d# = distance(319.5, 179.5, j, k)/25.0
                    d = (d-roundDown(d))*(i<1)+(1-d+RoundDown(d))*(i>0)
                    if 0<.5-d then putPixel2 j, k, 255*256*256+255
                    if i<1 And 0>.5-d Then putPixel2 j, k, 255*256*256+255*256+255
                next k
            next j
            unlock image(imgs(i))
        endif
    next i
    drawToScreen
    
    drawToImage imgs(4)
        lock image(imgs(4))
        for i = 0 To 319
            for j = 0 to 239
                dd# = rnd(.9,1.2)*247.0*((1.0-distance(160, 90, i, j)/distance(160,90,0,0)))
                putPixel2 i, j, roundDown(dd*.4)*256*256+roundDown(dd*.1)*256+roundDown(dd*.1)
            next j
        next i
        unlock image(imgs(4))
    drawToScreen
    
    drawToImage imgs(5)
        lock image(imgs(5))
        for i = 0 to 319
            for j = 0 to 239
                dd# = rnd(.9,1.2)*247.0*((1.0-distance(160, 90, i, j)/distance(160,90,0,0)))
                putPixel2 i, j, roundDown(dd*.2)*256*256+roundDown(dd*.15)*256+roundDown(dd*.1)
            next j
        next i
        unlock image(imgs(5))
    drawToScreen
return

initFeedback:
	defaultMask 1, 255, 0, 255
	ping = makeImage(FEEDBACK_WIDTH,FEEDBACK_HEIGHT)
	pong = makeImage(FEEDBACK_WIDTH,FEEDBACK_HEIGHT)
	pang = makeImage(FEEDBACK_WIDTH,FEEDBACK_HEIGHT)
	pung = makeImage(FEEDBACK_WIDTH,FEEDBACK_HEIGHT)
	ptmp = makeImage(FEEDBACK_WIDTH,FEEDBACK_HEIGHT)
	defaultMask 1, 0,0,0
	grid = makeImage(FEEDBACK_WIDTH+1,FEEDBACK_HEIGHT+1)
	
	color 255, 0, 255
	drawToImage grid
	for i = 0 to 160
		line i*2, 0, i*2, 241
		if i<121 then line 0, i*2, 321, i*2
	next i
	drawToBuffer
	
	dim fpos(719,3)
	
	for i = 0 to 19
		for j = 0 to 35
			fpos(j+i*36,0) = 110+cos(j*10  )*(6.0*(i+.5))-6
			fpos(j+i*36,1) = 90+sin(j*10  )*(6.0*(i+.5))-6
			fpos(j+i*36,2) = 110+cos(j*10+2)*(6.0*(i+.62))-6
			fpos(j+i*36,3) = 90+sin(j*10+2)*(6.0*(i+.62))-6
		next j
	next i
	
	positionCamera FEEDBACK_WIDTH, -FEEDBACK_HEIGHT

return



initParticleup:
    particleupspawntime# = .0
    particleupspeed# = 1.0
    particleupscale# = 1.0
    const upparticlecount = 199
    dim upparticle#(upparticlecount,6)
    
    for i = 0 to upparticlecount
        a# = rnd(360)
        r# = sqrt(rnd(30))
        upparticle(i,0) = r*cos(a)
        upparticle(i,1) = rnd(-.1,.1)
        upparticle(i,2) = r*sin(a)
        upparticle(i,3) = rnd(-1,1)
        upparticle(i,4) = rnd(-1,1)
        upparticle(i,5) = rnd(-1,1)
        l# = 1.0/sqrt(upparticle(i,3)*upparticle(i,3)+upparticle(i,4)*upparticle(i,4)+upparticle(i,5)*upparticle(i,5))
        upparticle(i,3) = upparticle(i,3)*l
        upparticle(i,4) = upparticle(i,4)*l
        upparticle(i,5) = upparticle(i,5)*l
        upparticle(i,6) = rnd(.5)
    next i
return

scaleBuffer:
    for sb_i=180 to 0 step -1
        copyBox 0, sb_i,320,1,0, sb_i*2,image(gBuffer),image(gBuffer)
        copyBox 0, sb_i,320,1,0, sb_i*2+1,image(gBuffer),image(gBuffer)
    next sb_i
    for sb_i=320 to 0 step -1
        copyBox sb_i,0,1,360,sb_i*2,0,image(gBuffer),image(gBuffer)
        copyBox sb_i,0,1,360,sb_i*2+1,0,image(gBuffer),image(gBuffer)
    next sb_i
return

drawDemo:
	color 20, 20, 20
	box 0,0,640,480,1
    
	If gCurrentScene = "kiito" or gCurrentScene="demoname" then
		gosub kiitoEffu
	elseIf gCurrentScene = "jatkuu" then
		gosub aavikkoEffu
	elseIf gCurrentScene = "ufo" or gCurrentScene = "ufo2" then
		gosub sotkuEffu
	elseIf gCurrentScene = "xfiles" then
		gosub taajamaEffu
	elseIf gCurrentScene = "weather" then
		gosub heimoEffu
	    gosub drawTorus
	elseIf gCurrentScene = "beat" then
        gosub drawTorus
	elseIf gCurrentScene = "mafia"
		gosub templeEffu
        gosub drawParticleup
    elseIf gCurrentScene = "outro"
        gosub atominEffu
        gosub loppu
	else
		gosub atominEffu
 
	endif
    if track_values(14)>.5 then gosub hoerpel
return

loppu:
    SET_CAMERA_VARS(a_)
    _px#=0
    _py#=-60
    _pz#=70
    KAMERA(a_,_,_)
    _d#=A_DIST(_px#,_py#,_pz#)
    'color a_clampc(a_r#/_d#*40-_d#),a_clampc(a_g#/_d*40-_d#),a_clampc(a_b#/_d#*40-_d#)
    'box _px#/_d#*180.0+160,_py#/_d#*180.0+90,10,10
    'lock image(gBuffer)
    hobo(bars,50/_d#*envelope#(bars#, 76,86,86,89),_px#/_d#*180.0+160,_py#/_d#*180.0+90,a_cRoll)
    'unlock
return

drawParticleup:
    upparticlet# = (bars-particleupspawntime#)*particleupspeed#
    px# = .0
    py# = .0
    pz# = .0
    a_r#= 200
    a_g# = 20
    a_b# = 20
    for i = 0 To upparticlecount
        pt# = upparticlet-upparticle(i,6)
        If pt>.0 then
            px = upparticle(i,0)+upparticle(i,3)*pt
            py = upparticle(i,1)+upparticle(i,4)*pt+2.0*pt*pt
            pz = upparticle(i,2)+upparticle(i,5)*pt
            px = (1.0-(particleupscale-1)*.6)*(px + .2*(cos(pz*100.0)-cos(py*100.0)))
            py = particleupscale*(py + .2*(cos(px*100.0)-cos(pz*100.0)))
            pz = particleupscale*(pz + .2*(cos(py*100.0)-cos(px*100.0)))
            gosub a_dot
        endif
    next i
return

hoerpel:
    for i = 0 to 179
        copyBox 0, i, 319, 1, int(rnd(-1.0,1.0)*track_values(14)), i
    next i
return

drawTorus:
    SET_CAMERA_VARS(a_)
    ang1# = 90+1.2^((65-bars)*2.5) * 140.0 * .3
    ang2# = 90+1.2^((65-bars)*2.5) * 140.0 * .29
    cang# = bars * 140.0 * .9
    cosa1# = cos(ang1)
    sina1# = sin(ang1)
    cosa2# = cos(ang2)
    sina2# = sin(ang2)
    fcang# = cang - roundDown(cang)
    dist# = 20.0+max(.0,(61-bars)*50.0)
    //c1 = lerp(80,lerp(220,160,()*.5+.5),sin(cang)*.5+.5)
    //c2 = lerp(160,lerp(160,220,cos(cang)*.5+.5),sin(cang)*.5+.5)
    //c3 = lerp(220,lerp(80,80,cos(cang)*.5+.5),sin(cang)*.5+.5)
    lock
        for i = 0 to ires*jres*2-1
            x1# = cosa2*torus(i,0,0)+sina2*(cosa1*torus(i,0,1)+sina1*torus(i,0,2))
            y1# = cosa2*(cosa1*torus(i,0,1)+sina1*torus(i,0,2))-sina2*torus(i,0,0)
            z1# = cosa1*torus(i,0,2)-sina1*torus(i,0,1)
            x2# = cosa2*torus(i,1,0)+sina2*(cosa1*torus(i,1,1)+sina1*torus(i,1,2))
            y2# = cosa2*(cosa1*torus(i,1,1)+sina1*torus(i,1,2))-sina2*torus(i,1,0)
            z2# = cosa1*torus(i,1,2)-sina1*torus(i,1,1)
            x3# = cosa2*torus(i,2,0)+sina2*(cosa1*torus(i,2,1)+sina1*torus(i,2,2))
            y3# = cosa2*(cosa1*torus(i,2,1)+sina1*torus(i,2,2))-sina2*torus(i,2,0)
            z3# = cosa1*torus(i,2,2)-sina1*torus(i,2,1)
            
            s1# = 400.0/(z1+dist)
            s2# = 400.0/(z2+dist)
            s3# = 400.0/(z3+dist)
            if (s2*x2-s1*x1)*(s3*y3-s1*y1)-(s3*x3-s1*x1)*(s2*y2-s1*y1)>0 then
                s4# = (400.0+140.0*max(.0,bars-65+.2*sin(bars*1500.0)))/(cosa1*torus(i,1,2)-sina1*torus(i,1,1)+dist)
                //nz# = (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)
                //c# = Max(.05,(1-nz/Sqrt(((y2-y1)*(z3-z1)-(y3-y1)*(z2-z1))^2+((x2-x1)*(z3-z1)-(x3-x1)*(z2-z1))^2+nz*nz))^2)
                
                //Color c*c1, c*c2, c*c3
                color 20,20,20
                //Color c*160, c*220, c*80
                tx1#=160+roundDown(s1*x1)
                ty1#=90+roundDown(s1*y1)
                tx2#=160+roundDown(s2*x2)
                ty2#=90+roundDown(s2*y2)
                tx3#=160+roundDown(s3*x3)
                ty3#=90+roundDown(s3*y3)
                
                px1# = tx1
                py1# = ty1
                px2# = tx2
                py2# = ty2
                px3# = tx3
                py3# = ty3
                
                if (ty1>ty2) then
                    tmpy = ty1
                    tmpx = tx1
                    ty1 = ty2
                    tx1 = tx2
                    ty2 = tmpy
                    tx2 = tmpx
                endif
                if (ty1>ty3) then
                    tmpy = ty1
                    tmpx = tx1
                    ty1 = ty3
                    tx1 = tx3
                    ty3 = tmpy
                    tx3 = tmpx
                endif
                if (ty2>ty3) then
                    tmpy = ty2
                    tmpx = tx2
                    ty2 = ty3
                    tx2 = tx3
                    ty3 = tmpy
                    tx3 = tmpx
                endif
                if(ty2=ty1) Then ty1-0.0001
                If(ty3=ty2) Then ty3+0.0001
                slp1# = (tx3-tx1)/(ty3-ty1)
                slp2# = (tx2-tx1)/(ty2-ty1)
                slp3# = (tx3-tx2)/(ty3-ty2)
                tx1# = tx1 - slp1*ty1
                tx2# = tx2 - slp2*ty2
                tx3# = tx3 - slp3*ty3
                for ii = ty1 To ty2
                    line tx1+slp1*ii, ii, tx2+slp2*ii, ii
                next ii
                for ii = ty2 To ty3
                    line tx1+slp1*ii, ii, tx3+slp3*ii, ii
                next ii
                i=i+1
                x4# = cosa2*torus(i,1,0)+sina2*(cosa1*torus(i,1,1)+sina1*torus(i,1,2))
                y4# = cosa2*(cosa1*torus(i,1,1)+sina1*torus(i,1,2))-sina2*torus(i,1,0)
                x1=160+roundDown(s4*x4)
                y1=90+roundDown(s4*y4)
                x2=160+roundDown(s2*x2)
                y2=90+roundDown(s2*y2)
                x3=160+roundDown(s3*x3)
                y3=90+roundDown(s3*y3)
                px4# = x1
                py4# = y1
                if (y1>y2) then
                    tmpy = y1
                    tmpx = x1
                    y1 = y2
                    x1 = x2
                    y2 = tmpy
                    x2 = tmpx
                endif
                if (y1>y3) then
                    tmpy = y1
                    tmpx = x1
                    y1 = y3
                    x1 = x3
                    y3 = tmpy
                    x3 = tmpx
                endif
                if (y2>y3) then
                    tmpy = y2
                    tmpx = x2
                    y2 = y3
                    x2 = x3
                    y3 = tmpy
                    x3 = tmpx
                endif
                if(y2=y1) then y1-0.0001
                if(y3=y2) then y3+0.0001
                slp1# = (x3-x1)/(y3-y1)
                slp2# = (x2-x1)/(y2-y1)
                slp3# = (x3-x2)/(y3-y2)
                x1 = x1 - slp1*y1
                x2 = x2 - slp2*y2
                x3 = x3 - slp3*y3
                For ii = y1 to y2
                    line x1+slp1*ii, ii, x2+slp2*ii, ii
                next ii
                for ii = y2 To y3
                    line x1+slp1*ii, ii, x3+slp3*ii, ii
                next ii
                _d# = 17.0/s3+1.8
                color a_clampc(160/_d*2-_d),a_clampc(160/_d*2-_d),a_clampc(160/_d*2-_d)
                line px1, py1, px2, py2
                line px1, py1, px3, py3
                line px2, py2, px4, py4
                line px4, py4, px3, py3
                
            else
                i = i + 1
            endif
        next i
    unlock
    endt# = 180.0^(bars-67.0)
    for i = 0 to 179
        copyBox 0, i, 319, 1, int(rnd(-endt,endt)), i
    next i
return

// paints the white parts of the given image to the given color
// result is saved to imgFadeMask
#define FADEIMAGE(_img, _r, _g, _b) maskImage imgFadeMask, 255, 255, 255 : maskImage _img, 255, 255, 255 : drawToImage imgFadeMask : color 0,0,0  : box 1,1,imageWidth(imgFadeMask)-1, imageHeight(imgFadeMask)-1  : color _r,_g,_b  : box 1,1,imageWidth(_img)-1, imageHeight(_img)-1 : drawImage _img, 1, 1 : drawToBuffer : maskImage _img, 0, 0, 0 : maskImage imgFadeMask, 0, 0, 0

heimoEffu:
	ukko_margin = imageWidth(imgUkot(0))
	ukko_amount = 320 / ukko_margin
	ukko_ofs# = ((bars * 360.0 * 0.75) mod ukko_margin) // + sin(bars*360.0*4)*5.0
	
	for i=0 to ukko_amount+1
		randomize i
		frame = int(bars*8+rnd(0.1)) mod 2
		
		ukko_hyppy# = max(-0.0, sin(bars*360*4.0 - 10.0+rnd(0,40.0))) * 10.0 
		drawImage imgUkot(frame), ukko_margin * i - ukko_ofs + sin(bars*360*4.0-20.0)*10.0 + rnd(1.0), 1 + ukko_hyppy
		drawImage imgUkot(frame+2), -ukko_margin+320-ukko_margin * i + ukko_ofs - sin(bars*360*4.0-20.0)*10.0 + rnd(1.0), 120 + ukko_hyppy
	next i
return

taajamaEffu:
	#define house_margin 1.5
	#define house_amount 8
	#define house_dist 4.0
	#define house_levels 3
	#define shake sin(90+bars*360)^2.0*track_values_smooth(TRACK_GROUND_ROUGHNESS)

	scaley# = track_values_smooth(TRACK_SCALE_Y)
	for i=0 to 20
		SET_CAMERA_VARS(a_)
		a_cX# = track_values(6)*-200
		cAlt#=track_values_smooth(3)*30-15
		a_r#=200
        a_g# = 1
        a_b# = 1
		a_cZ# = a_cZ + (i mod house_levels)*-house_dist + house_dist*house_levels + sin(i * -29.0)*3.0
		a_cX# = a_cX + (i*house_margin) + sin(i * 31.0)
		a_cX# = a_cX + shake
		//a_cX + (i*house_margin)  mod (house_margin*8) +house_margin*2
		if i mod 4 = 0 then
			modelobj = house2obj
		else
			modelobj = house1obj
		endif
		
		RENDER_OBJECT_SCALED(modelobj,a_,a_smart_line, 1.0, scaley + sin(i*30), 1.0)
	next i
	
	#undef shake
	#undef house_levels
	#undef house_amount
	#undef house_dist
	#undef house_margin
	
	drawImage imgSplash,0,track_values_smooth(TRACK_OVERLAY_X)*400-imageHeight(imgWeGreet)
	drawImage imgWeGreet,0,track_values_smooth(TRACK_OVERLAY_X)*400-imageHeight(imgWeGreet) + sin(bars*360)^2*5
	
	teximage = imgTimblex
	#define fontheight 75
	drawImage imgTimblex, track_values_smooth(TRACK_OVERLAY_Y)*1400-300 , fontheight + sin(bars*360)^2*4
	drawImage imgCb2, track_values_smooth(TRACK_OVERLAY_Y)*1400-600 , fontheight + sin(bars*360+90)^2*4
	#undef fontheight
	
return

aavikkoEffu:
	SET_CAMERA_VARS(a_)
	a_cZ = track_values(8)*-50	// don't smooth the z-axis camera movement
    
    lock image(gBuffer)
    a_r#=200
    a_g# = 0
    a_b# = 0
    

	a_shipX = a_shipX + sin(bars*360.0*0.1)*3.0
	a_shipZ = a_shipZ * 3.0
	a_cZ# = a_cZ*3.0
    
    gosub a_ground

    a_r#=200
    a_g# = 200
    a_b# = 200
    

	RENDER_OBJECT(shipobj,a_,a_smart_line)
	
    
    unlock
return

templeEffu:
	SET_CAMERA_VARS(a_)
    
    lock image(gBuffer)
    a_r#=200
	
	RENDER_OBJECT(templeobj,a_,a_smart_line)
    
    unlock
    a_cZ = a_cZ +1.0
    particleupscale = 1.5
    particleupspawntime = 61
    particleupspeed = .08
    gosub drawParticleup
    
return

kiitoEffu:
	gosub atominEffu

	c = a_clampc(track_values(TRACK_FADE)*255)
    
    SET_CAMERA_VARS(a_)
    a_cX = -3.0
    a_cZ = 6.0
    particleupspawntime = 9.0
    particleupspeed = .4
    gosub drawParticleup
	
	color cbWhite
	
	if gCurrentScene = "demoname" then
		drawImage imgDemoLogoBg , 160-imageWidth(imgDemoLogo)/2 + cos(bars*360*2.0) * 1, 50 + sin(bars*360) * 2
		drawImage imgDemoLogo, 160-imageWidth(imgDemoLogo)/2, 50 
		
	else
		FADEIMAGE(imgSmallLogo, c, c, c)
		if c>20 then drawImage imgFadeMask, 15, 122
	endif
return

sotkuEffu:
	ypos# = -bars*100.0 + track_values(TRACK_FADE)*100.0
	
	// teksti näkyy vain hetken aikaa
	if gCurrentScene = "ufo" then
        clsColor 0, 0, 0
        t# = (bars-2)*3000.0
        for i = 0 to 1
            pc(i*2+0) = 140*cos(t*(.02+i*.01)- track_values(TRACK_FADE)*90.0)-160
            pc(i*2+1) = 70*sin(t*(.025+i*.01)- track_values(TRACK_FADE)*90.0)-90
            drawToImage imgs(2)
                cls
                drawImage imgs(0), pc(2-2*i), pc(3-2*i)
                drawImage imgs(1), pc(0+2*i), pc(1+2*i)
            drawToImage imgs(3)
                if i<1 then cls
                drawImage imgs(2), 0, 0
        next i
        drawToImage imgs(6)
            drawImage imgs(4), 0, 0
            drawImage imgs(3), 0, 0
        drawToBuffer
        i = i + 1
        drawImage imgs(5), 0, 0
        drawImage imgs(6), 0, 0
        clsColor 20, 20, 20

		drawImage imgGarbage, 0, ypos mod imageHeight(imgGarbage)
		drawImage imgGarbage, 0, ypos mod imageHeight(imgGarbage) + imageHeight(imgGarbage)
        
	elseIf gCurrentScene = "ufo2" then
		gosub feedbackEffu
	endif
return

feedbackEffu:
	t = timer()
	ft2 = t
	
	lock image(pang)
	drawToImage pang
		color cbred
		SET_CAMERA_VARS(a_)
    
		a_r#=200
	
		RENDER_OBJECT(shipobj,a_,a_smart_line)
	
	unlock
	drawToBuffer

	fy_ofs = -50
	
    feedbackk = feedbackk + 1
    if feedbackk>3 then feedbackk = 0
    select feedbackk
        case 0
            for i = 0 To 179
                copyBox fpos(i,0)+Rand(-1,1),fpos(i,1)+Rand(-1,1),12,12,fpos(i,2),fpos(i,3),Image(ping),Image(pong)
            next i
            copyBox 0,0,FEEDBACK_WIDTH,FEEDBACK_HEIGHT,0,0,image(pung),Image(ptmp)
            drawToImage ptmp
            drawImage grid, -1, -1
            drawToImage pang
            drawImage ptmp,0,0
            drawToBuffer
        case 1
            for i = 180 To 359
                copyBox fpos(i,0)+Rand(-1,1),fpos(i,1)+Rand(-1,1),12,12,fpos(i,2),fpos(i,3),image(ping),image(pong)
            next i
            copyBox 0,0,FEEDBACK_WIDTH,FEEDBACK_HEIGHT,0,0,image(pung),image(ptmp)
            drawToImage ptmp
            drawImage grid, 0, 0
            drawToImage pang
            drawImage ptmp,0,0
            drawToBuffer
        case 2
            for i = 360 To 539
                copyBox fpos(i,0)+Rand(-1,1),fpos(i,1)+Rand(-1,1),12,12,fpos(i,2),fpos(i,3),Image(ping),Image(pong)
            next i
            copyBox 0,0,FEEDBACK_WIDTH,FEEDBACK_HEIGHT,0,0,image(pung),image(ptmp)
            drawToImage ptmp
            drawImage grid, 0, -1
            drawToImage pang
            drawImage ptmp,0,0
            drawToBuffer
        case 3
            for i = 540 To 179
                copyBox fpos(i,0)+rand(-1,1),fpos(i,1)+Rand(-1,1),12,12,fpos(i,2),fpos(i,3),image(ping),image(pong)
            next i
            copyBox 0,0,FEEDBACK_WIDTH,FEEDBACK_HEIGHT,0,0,image(pung),image(ptmp)
            drawToImage ptmp
            drawImage grid, -1, 0
            drawToImage pang
            drawImage ptmp,0,0
            drawToBuffer
            tmp = ping
            ping = pong
            pong = tmp
            copyBox 0,0,FEEDBACK_WIDTH,FEEDBACK_HEIGHT,0,0,image(pong),image(pang)
            copyBox 0,0,FEEDBACK_WIDTH,FEEDBACK_HEIGHT,0,0,image(ping),image(pung)
    endSelect
    //color max(0,127.5+127.5*Sin(bars*.015)-Max(0,bars-10000)-.01*Max(0,bars-10000)), Max(0,127.5+127.5*Sin(ft2*.02)-.01*Max(0,ft2-10000)), Max(0,127.5+127.5*Sin(ft2*.01)-.01*Max(0,ft2-10000))
	fphase# =sin(bars*360*0.5)
	fphase2# =sin(bars*360*0.25)
	//smokecolor = saturate(1.0+)*64+70
	fb# = (1.0+fphase)*.5
	fb = fb * fb
	color lerp(30, 200, fb), lerp(30, 40, fb), lerp(40, 40, fb*fb)
	drawToImage ping
    circle 105+10*sin(ft2*.1), 85+10*cos(ft2*.12), 10
    drawToBuffer
    drawImage pang, 0, 0

	// overlay
	drawImage imgRealtime, 10, -imageHeight(imgRealtime) + track_values_smooth(TRACK_OVERLAY_X) * 180
	drawImage imgSimulation, 320- track_values_smooth(TRACK_OVERLAY_Y) * 320, 180-imageHeight(imgRealtime)-2
	
	color 20,20,20
	box 0,180-track_values(TRACK_FADE)*181,320,180
return 


// fisheyee distance
#define a_dist(__px,__py,__pz) (sqrt(( __px)^2+( __py)^2+( __pz)^2))

atominEffu:
    //kamera pyörii jonkun jännän jutskan ympärillä. linejä. bucketointi lopuksi jos tarvii
    //y pienenee ylöspäin ja z kasvaa eteenpäin x kasvaa oikealle, kai
    //color 200,0,0

	
	SET_CAMERA_VARS(a_)
    
    lock image(gBuffer)
    a_r#=200
    a_g# = 0
    a_b# = 0

    gosub a_ground

    a_r#=200
    a_g# = 200
    a_b# = 200
    
    RENDER_OBJECT(shipobj,a_,a_smart_line)
 
    unlock
return

a_ground:
    
    #define gridscale 2.5
    #define gridsize 8

    //camera coordinates in ground tiles
    a_gMovedX=a_cX/gridscale
    a_gMovedZ=(a_cZ/gridscale)

    for x=-gridsize-a_gMovedX to gridsize-a_gMovedX   
        a_gRough2#=min(1,(x*0.2)^2)*a_gRough
        a_gRough3#=min(1,((x+1)*0.2)^2)*a_gRough
        for z=-gridsize-a_gMovedZ to gridsize-a_gMovedZ

            px#=(x+1.0)*gridscale
            pz#=z*gridscale
            py#=(sin(px*100)+sin(pz*100))*a_gRough3
            
            px2#=x*gridscale
            pz2#=pz
            py2#=(sin(px2*100)+sin(pz2*100))*a_gRough2

            gosub a_smart_line

            px#=x*gridscale
            pz#=(z+1)*gridscale
            py#=(sin(px*100)+sin(pz*100))*a_gRough2
            
            px2#=px
            pz2#=pz-gridscale
            py2#=(sin(px2*100)+sin(pz2*100))*a_gRough2

            gosub a_smart_line

        next z
    next x

	#undef gridsize
    #undef gridscale

return


a_dot:
    gosub a_kamera
    pd#=a_dist(px#,py#,pz#)
    _d# = pd*4*a_cFog
    color a_clampc(a_r/_d*2-_d),a_clampc(a_g/_d*2-_d),a_clampc(a_b/_d*2-_d)
    if pz<0.2 then dot px#/pd#*180.0+160,py#/pd#*180.0+90
return

a_line:
    gosub a_kamera
    gosub a_kamera2
    pd#=a_dist(px,py,pz)
    pd2#=a_dist(px2,py2,pz2)
    if pz<0.2 and pz2<0.2 then line px/pd#*180.0+160,py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90
return

a_line_with_fog:
    gosub a_kamera
    gosub a_kamera2
    pd#=a_dist(_px#,_py#,_pz#)
    pd2#=a_dist(px2#,py2#,pz2#)
    _d#=(pd+pd2)*2.0*a_cFog
    color a_clampc(a_r/_d*2-_d),a_clampc(a_g/_d*2-_d),a_clampc(a_b/_d*2-_d)
    if _pz<0.2 and pz2<0.2 then line _px/pd#*180.0+160,_py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90
return

_s_a_line_with_fog: //takes _-prefixed input-variables instead
    gosub _s_a_kamera
    gosub _s_a_kamera2
    pd#=a_dist(px#,py#,pz#)
    pd2#=a_dist(px2,py2,pz2)
    _d#=(pd+pd2)*2.0*a_cFog
    color a_clampc(a_r/_d*2-_d),a_clampc(a_g/_d*2-_d),a_clampc(a_b/_d*2-_d)
    if pz<0.2 and pz2<0.2 then line px/pd#*180.0+160,py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90
return

a_smart_line:
    _px#=px//do this just to avoid another copy of camera function
    _py#=py
    _pz#=pz
    _s_d#=a_dist(px-px2,py-py2,pz-pz2)*6.0
    px#=(px#+px2#)/2.0
    py#=(py#+py2#)/2.0
    pz#=(pz#+pz2#)/2.0
    gosub a_kamera
    _s_d=roundup(_s_d/(a_dist(px,py,pz)^2*0.2+0.5)+1)

    if _s_d>1 then
        _dx#=(px2-_px)/_s_d
        _dy#=(py2-_py)/_s_d
        _dz#=(pz2-_pz)/_s_d
        _s_px#=_px
        _s_py#=_py
        _s_pz#=_pz
        for _s_i=1 to _s_d-1
            _px2#=_s_px+_dx*_s_i
            _py2#=_s_py+_dy*_s_i
            _pz2#=_s_pz+_dz*_s_i
            _s_i2=_s_i+1
            gosub _s_a_line_with_fog
            _px=_s_px+_dx*_s_i2
            _py=_s_py+_dy*_s_i2
            _pz=_s_pz+_dz*_s_i2
            gosub _s_a_line_with_fog
        next _s_i
    
    else
        px=_px
        py=_py
        pz=_pz
        gosub a_line_with_fog
    endif
    
return


a_kamera:
    //rotate around origin and translate back
    px=px+cos(a_cAng-90)*a_cDist+a_cX
    pz=pz-sin(a_cAng-90)*a_cDist+a_cZ
    py=py+a_cAlt+a_cY
    a_a#=-getAngle(0,0,px,pz)
    a_d#=-distance(0,0,px,pz)
    px=cos(a_a+a_cAng)*a_d
    pz=-sin(a_a+a_cAng)*a_d
    //rotate camera
    a_a#=getAngle(0,0,px,pz)
    a_d#=distance(0,0,px,pz)
    px=cos(a_a+a_cRot)*a_d
    pz=-sin(a_a+a_cRot)*a_d
    //pitch
    a_a#=getAngle(0,0,pz,py)
    a_d#=distance(0,0,pz,py)
    pz=cos(a_a+a_cPitch)*a_d
    py=-sin(a_a+a_cPitch)*a_d
    //roll
    a_a#=getAngle(0,0,px,py)
    a_d#=distance(0,0,px,py)
    px=cos(a_a+a_cRoll)*a_d
    py=-sin(a_a+a_cRoll)*a_d
return


a_kamera2: //should be identical to a_kamera, except for variable names
    //rotate around origin and translate back
    px2=px2+cos(a_cAng-90)*a_cDist+a_cX
    pz2=pz2-sin(a_cAng-90)*a_cDist+a_cZ
    py2=py2+a_cAlt+a_cY
    a_a#=-getAngle(0,0,px2,pz2)
    a_d#=-distance(0,0,px2,pz2)
    px2=cos(a_a+a_cAng)*a_d
    pz2=-sin(a_a+a_cAng)*a_d
    //rotate camera
    a_a#=getAngle(0,0,px2,pz2)
    a_d#=distance(0,0,px2,pz2)
    px2=cos(a_a+a_cRot)*a_d
    pz2=-sin(a_a+a_cRot)*a_d
    //pitch
    a_a#=getAngle(0,0,pz2,py2)
    a_d#=distance(0,0,pz2,py2)
    pz2=cos(a_a+a_cPitch)*a_d
    py2=-sin(a_a+a_cPitch)*a_d
    //roll
    a_a#=getAngle(0,0,px2,py2)
    a_d#=distance(0,0,px2,py2)
    px2=cos(a_a+a_cRoll)*a_d
    py2=-sin(a_a+a_cRoll)*a_d
return

//takes _-prefixed input-variables instead
_s_a_kamera:
    //rotate around origin and translate back
    px=_px+cos(a_cAng-90)*a_cDist+a_cX
    pz=_pz-sin(a_cAng-90)*a_cDist+a_cZ
    py=_py+a_cAlt+a_cY
    a_a#=-getAngle(0,0,px,pz)
    a_d#=-distance(0,0,px,pz)
    px=cos(a_a+a_cAng)*a_d
    pz=-sin(a_a+a_cAng)*a_d
    //rotate camera
    a_a#=getAngle(0,0,px,pz)
    a_d#=distance(0,0,px,pz)
    px=cos(a_a+a_cRot)*a_d
    pz=-sin(a_a+a_cRot)*a_d
    //pitch
    a_a#=getAngle(0,0,pz,py)
    a_d#=distance(0,0,pz,py)
    pz=cos(a_a+a_cPitch)*a_d
    py=-sin(a_a+a_cPitch)*a_d
    //roll
    a_a#=getAngle(0,0,px,py)
    a_d#=distance(0,0,px,py)
    px=cos(a_a+a_cRoll)*a_d
    py=-sin(a_a+a_cRoll)*a_d
return

//takes _-prefixed input-variables instead
_s_a_kamera2: //should be identical to a_kamera, except for variable names
    //rotate around origin and translate back
    px2=_px2+cos(a_cAng-90)*a_cDist+a_cX
    pz2=_pz2-sin(a_cAng-90)*a_cDist+a_cZ
    py2=_py2+a_cAlt+a_cY
    a_a#=-getAngle(0,0,px2,pz2)
    a_d#=-distance(0,0,px2,pz2)
    px2=cos(a_a+a_cAng)*a_d
    pz2=-sin(a_a+a_cAng)*a_d
    //rotate camera
    a_a#=getAngle(0,0,px2,pz2)
    a_d#=distance(0,0,px2,pz2)
    px2=cos(a_a+a_cRot)*a_d
    pz2=-sin(a_a+a_cRot)*a_d
    //pitch
    a_a#=getAngle(0,0,pz2,py2)
    a_d#=distance(0,0,pz2,py2)
    pz2=cos(a_a+a_cPitch)*a_d
    py2=-sin(a_a+a_cPitch)*a_d
    //roll
    a_a#=getAngle(0,0,px2,py2)
    a_d#=distance(0,0,px2,py2)
    px2=cos(a_a+a_cRoll)*a_d
    py2=-sin(a_a+a_cRoll)*a_d
return


function hobo(t#, zoom#,_cx#,_cy#, roll)
	'drawImage img, 0,0
	t720# = t*72.0
	t180# = t*18.0
	t360# = t*36.0
	t90# = t*9.0    
	t45# = t*4.5
	color 255,255,255
	for n = 0 To 32
        cx#=_cx#
        cy#=_cy#
		lgrowth# = t90+n*736.4
		length# = (Cos(lgrowth)*4.0+4.0)*zoom
		For i = 0 to 32
			ang# = 2.0*i*Cos(t180+Sin(8.0*i+t360+n*147.6)*90+87.8*n)+564.4*n
			nx# = cx+Cos(ang+t45-roll)*length
			ny# = cy+Sin(ang+t45-roll)*length
			dist# = Min(1.0,Distance(nx,ny*4/3,160.0,160.0)/120.0)
			c = 255.0-dist*dist*255.0
			color c*0.3+20,20,20
			Line cx,cy,nx,ny
			cx = nx
			cy = ny
		next i
		If -sin(lgrowth)<0 Then
			circle nx-2, ny-2,5 
		endif
	next n
endFunction 

function envelope#(t#, a#,b#,c#,d#)
	If t<a then
		Return 0.0
	EndIf
	If t<b Then
		Return (t-a)/(b-a)
	EndIf
	If t<c Then
		Return 1.0
	EndIf
	If t<d Then
		Return (d-t)/(d-c)
	endif
	return 0.0
End function
