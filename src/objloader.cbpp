
#include "stdlib.cbpp"

#ifndef BUILD_AS_LIB

#define DEBUG

SCREEN 800, 900

loadWavefrontObj("assets/obj/testscene.obj")

repeat

	
	drawScreen
forever

#endif

function loadWavefrontObj(path$)
	assert(fileExists(path))
	
	vertex_amount = 0
	current_vertex = 0
	current_object = -1
	current_line = 0
	line_amount = 0
	row = -1
	
	f = openToRead(path)
	
	objectid = 0
	infoblock  = getModelInfo(f, objectid)
	
	vertex_amount = peekInt(infoblock, 0)
	face_amount = peekInt(infoblock, 4)
	max_line_amount = peekInt(infoblock, 8)
	
	#ifdef DEBUG
	addText "vertex_amount: " + vertex_amount
	addText "faces: " + face_amount
	addText "max_line_amount: " + max_line_amount
	#endif
	
	seekFile f, 0
	
	#define POINT_START 0
	#define POINT_END 1
	#define COORD_X 0
	#define COORD_Y 1
	#define COORD_Z 2
	
	// a temporary array for our vertices and lines
	dim _verts(vertex_amount-1, 2) as float
	dim _lineverts(max_line_amount-1, 1, 2) as float
	
	current_object = -1
	row = -1
	while (not EOF(f))
		row + 1
		l$ = readLine(f)
		char$ = mid(l, 1, 1)

		if char = "#" then goto continue
		
		select char
			case "o"
				current_object + 1
				
				if current_object > objectid then exit	// we only load one object
			case "v"
				if current_object < 0 then makeError("vertex not inside object at row " + row + " in " + path$)
				if current_object <> objectid then goto continue
				
				vx# = float(getWord(l, 2))
				vy# = float(getWord(l, 3))
				vz# = float(getWord(l, 4))
				
				_verts(current_vertex, COORD_X) = vx
				_verts(current_vertex, COORD_Y) = vy
				_verts(current_vertex, COORD_Z) = vz
				
				//pokeFloat xmem, current_vertex * 4, vx
				//pokeFloat ymem, current_vertex * 4, vy
				//pokeFloat zmem, current_vertex * 4, vz
				
				current_vertex + 1
			case "s"
				// we do not care about smoothing
			
			case "f"
				words = countWords(l)
				for i=2 to (words)
					// the line endpoints
					cur_index = int(getWord(l, i)) - 1
					
					// last point is connected to the first one
					if i = words then
						next_index = int(getWord(l, 2)) - 1
					else
						next_index = int(getWord(l, i + 1)) - 1
					endif
					
					#ifdef DEBUG
					addText "line: " + (cur_index + 1) + " -> " + (next_index + 1)
					#endif
					
					// copy the point coordinates to the line array
					_lineverts(current_line, POINT_START, COORD_X) = _verts(cur_index, COORD_X)
					_lineverts(current_line, POINT_START, COORD_Y) = _verts(cur_index, COORD_Y)
					_lineverts(current_line, POINT_START, COORD_Z) = _verts(cur_index, COORD_Z)
					
					_lineverts(current_line, POINT_END, COORD_X) = _verts(next_index, COORD_X)
					_lineverts(current_line, POINT_END, COORD_Y) = _verts(next_index, COORD_Y)
					_lineverts(current_line, POINT_END, COORD_Z) = _verts(next_index, COORD_Z)
					
					current_line + 1
				next i
			
		default
			makeError("Unknown obj command " + char + " at row " + row + " in " + path$)
		endSelect
		
		//addText "" + firstchar$
		continue:
	wend
	
	line_amount = current_line
	
	closeFile(f)
	
	for i=0 to vertex_amount-1
		vx = _verts(i, COORD_X) 
		vy = _verts(i, COORD_Y) 
		vz = _verts(i, COORD_Z) 
		
		//addText "vertex #" + i + ": " + vx + ", " + vy + ", " + vz
	next i

	xmem	= malloc(line_amount * 4 * 2)	// two floats / line (start and end points)
	ymem	= malloc(line_amount * 4 * 2)
	zmem	= malloc(line_amount * 4 * 2)
	
	current_line = 0

	for i=0 to line_amount-1
		sx# = _lineverts(i, POINT_START, COORD_X)
		sy# = _lineverts(i, POINT_START, COORD_Y)
		sz# = _lineverts(i, POINT_START, COORD_Z)
		
		ex# = _lineverts(i, POINT_END, COORD_X)
		ey# = _lineverts(i, POINT_END, COORD_Y)
		ez# = _lineverts(i, POINT_END, COORD_Z)
		
		// see if we have already added an identical line to the memblock
		hit = false
		for u=0 to i-1
			same_coords = 0
			for j=0 to 2
				if _lineverts(u, POINT_START, j) = _lineverts(i, POINT_START, j) then
					if _lineverts(u, POINT_END, j) = _lineverts(i, POINT_END, j) then same_coords + 1
				endif	
			next j
			
			if same_coords = 3 then hit = true
			
			// and the other way around
			same_coords = 0
			for j=0 to 2
				if _lineverts(u, POINT_END, j) = _lineverts(i, POINT_START, j) then
					if _lineverts(u, POINT_START, j) = _lineverts(i, POINT_END, j) then same_coords + 1
				endif	
			next j
			
			if same_coords = 3 then hit = true
			
			if hit then exit
		next u
		
		#ifdef DEBUG
		if hit then addText "skipping duplicate at " + i
		#endif
		if hit then goto continue
		
		// add this line to the list
		pokeFloat xmem, current_line * 8 + 0, sx 
		pokeFloat xmem, current_line * 8 + 4, ex 
		pokeFloat ymem, current_line * 8 + 0, sy 
		pokeFloat ymem, current_line * 8 + 4, ey 
		pokeFloat zmem, current_line * 8 + 0, sz 
		pokeFloat zmem, current_line * 8 + 4, ez 
		
		current_line = current_line + 1
		
		//addText "line from (" +sx+", "+sy+", "+sz+ ")" + " to (" +ex+", "+ey+", "+ez+ ")"
		continue:
	next i
	
	#ifdef DEBUG
		addText current_line + " lines loaded"
	#endif
	
	trimmed_xmem = malloc(current_line * 4 * 2)
	trimmed_ymem = malloc(current_line * 4 * 2)
	trimmed_zmem = malloc(current_line * 4 * 2)
	
	memCopy xmem, 0, trimmed_xmem, 0, (current_line * 4 * 2)
	memCopy ymem, 0, trimmed_ymem, 0, (current_line * 4 * 2)
	memCopy zmem, 0, trimmed_zmem, 0, (current_line * 4 * 2)
	
	#ifdef DEBUG
		addText "trimmed_xmem contains " + MEMBlockSize(trimmed_xmem) + " bytes = " + (MEMBlockSize(trimmed_xmem)/8) + " lines" 
	#endif
	
	free xmem
	free ymem
	free zmem
	
	// free the arrays
	// but we still leak 4 + 4 bytes of memory
	reDim _verts(0,0)
	reDim _lineverts(0,0,0)
		
	// we return a model descriptor memblock that contains pointers 
	modelDesc = malloc(3 * 4)	// three pointers in one memblock 
	
	pokeInt modelDesc, 0, trimmed_xmem
	pokeInt modelDesc, 4, trimmed_ymem
	pokeInt modelDesc, 8, trimmed_zmem
	
	return modelDesc
endFunction 

// f			an open file handle of a .obj file
// objectid		which object we want to load from the file (usually 0)
//
// returns a memblock where first int is the vertex amount, and the second int is the face amount
// third int is the line amount

function getModelInfo(f, objectid)
	infoblock = malloc(3 * 4)
	
	current_object = -1
	row = -1
	vertex_amount = 0
	face_amount = 0
	line_amount = 0
	
	while (not EOF(f))
		row + 1
		l$ = readLine(f)
		char$ = mid(l, 1, 1)

		if char = "#" then goto continue
		
		select char
			case "o"
				current_object + 1
				
				if current_object > objectid then exit
			case "v"
				if current_object < 0 then makeError("vertex not inside object at row " + row)
				if current_object = objectid then
					vertex_amount + 1
				endif
			case "f"
				if current_object < 0 then makeError("face not inside object at row " + row)
				if current_object = objectid then
					face_amount + 1
					line_amount = line_amount + countWords(l)
				endif
			
		default
			//makeError("Unknown obj command " + char + " at row " + row + " in " + path$)
		endSelect
		
		//addText "" + firstchar$
		continue:
	wend
		
	pokeInt infoblock, 0, vertex_amount
	pokeInt infoblock, 4, face_amount
	pokeInt infoblock, 8, line_amount
	
	return infoblock
endFunction 
