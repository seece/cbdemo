// precompiler options
#pragma anticrap

#ifndef BUILD_AS_LIB
#define USE_EDITOR
#define STANDALONE
#endif

#ifdef BUILD_AS_LIB
	#ifdef _DEBUG
		#define USE_EDITOR
	#endif
#endif

#define EDITOR_HEIGHT 150
#define SEEK_SPEED 0.4
//#define TRACK_AMOUNT 12
global tt#
global tb#
global gResetFoobar
gResetFoobar = true
global TRACK_AMOUNT
#ifdef STANDALONE
TRACK_AMOUNT = 12
gWindowMode = 1
#endif

#ifdef USE_EDITOR
	 #define UI_BUTTONSTRIP_WIDTH 150	// oikean laidan toimintonappulat
#endif

#ifdef _DEBUG
	#define assert(statement) if not (statement) then makeError __LINE__ + ": assertion failed"
#else
	#define assert(statement) 
#endif

// macros
#define malloc(size) makeMEMBlock(size)
#define free deleteMEMBlock
#define realloc resizeMEMBlock
#define toType(integer) convertToType(integer)
#define toInt(typevar) convertToInteger(typevar)

#define frac(_var) (_var-roundDown(_var))
#define round(_val) ()
#define lerp(_val1, _val2, _amount) (_val1 + (_val2 - _val1) * _amount)
#define barsToSecs(_bars, _tempo) (_bars * ((60.0/_tempo)*4.0))
#define snapToGrid(_value, _size) (int(_value/_size)*_size)
#define clamp(_val) (max(0.0,min(1.0, _val)))
#define mouseOverlap(_x,_y,_w,_h) (mouseX() >= (_x) and mouseX() <= ((_x) + (_w)) and mouseY() >= (_y) and mouseY() <= ((_y) + (_h)))
#define toggle(x) (x xor 1)
#define confirmDialog(_message) dialog(mouseX(), mouseY() - 100, _message)	// shows a dialog above mouse position

#define POINT_STRIDE 8
#define UNDEFINED -1

#ifdef USE_EDITOR
	include "../seek/cbnetwork.cb"
	include "inc/foobar.cb"
#endif

#ifdef BUILD_AS_LIB
	#ifdef _DEBUG
	include "inc/sync_debug.cb"
	#endif
	
	#ifdef _RELEASE
	include "inc/sync_release.cb"
	#endif
#else
	include "inc/sync_debug.cb"
#endif

const SCREEN_WIDTH = 640
const SCREEN_HEIGHT = 480
#define PICTURE_WIDTH SCREEN_WIDTH
#define PICTURE_HEIGHT int(SCREEN_WIDTH * (9.0/16.0))

#ifdef USE_EDITOR
	#define EDITOR_WIDTH int(min(1024, int(SCREEN_WIDTH*1.5)))
	SCREEN EDITOR_WIDTH, 570, 0, 1
	SAFEEXIT OFF
	clsColor 16,16,16
#else
	SCREEN SCREEN_WIDTH, SCREEN_HEIGHT, 0, gWindowMode
#endif

frameLimit 60

global gBuffer
gBuffer=makeImage(PICTURE_WIDTH, PICTURE_HEIGHT) // kuvasuhde 16:9

dim tracks(TRACK_AMOUNT)	// an array of track pointers
dim track_values(TRACK_AMOUNT) as float
gosub trackInit

#ifdef USE_EDITOR
	editorfont = loadFont("tahoma", 14)
	setFont editorfont

	editorp = createEnvEditor(0, PICTURE_HEIGHT, EDITOR_WIDTH, EDITOR_HEIGHT-24, 0.0, 10.0)
	editor\EnvEditor = toType(editorp)
	editor.track = tracks(selected_track)
	editor.status = "ready"
	
	selector\TrackSelector = UNDEFINED
	selector = toType(createTrackSelector(editor.x, editor.y + editor.height + editor.timelineHeight, editor.width - UI_BUTTONSTRIP_WIDTH, 30, TRACK_AMOUNT))
	
	flag_draw_editor = true
#else
	// in the finished demo we want to load all saved tracks automatically
	loadMultipleTracks(TRACK_AMOUNT)
#endif

#ifdef STANDALONE
	global tempo#
	tempo = 100.0
	
	// SCENE LOADING
	global gSceneAmount
	//global gCurrentScene$	// "extern" the global var
	global scenelistpath$
	scenelistpath = "sync/scenes.txt" 
	gSceneAmount = countFileRows(scenelistpath)
	assert(gSceneAmount > 0)
	dim scene_names(gSceneAmount-1) as string
	dim scene_start(gSceneAmount-1) as float
	loadScenes(scenelistpath)
#endif


gosub main
end

timeInit:
	tstart=timer()
	pause_start=timer()
	frames = 0
	pause_offset# = 0.0
	time_offset# = 0.0

	#ifdef USE_EDITOR
		playing = false
		muted = false
		setVolume(100)
	#else
		playing = true
	#endif
	
	t# = 0.0
	bars# = 0.0
return

trackInit:	
	for i=0 to TRACK_AMOUNT
		tracks(i) = createSyncTrack("synctrack #" + i )
		
		track\SyncTrack = toType(tracks(i))
		
		//point\Envpoint = new (Envpoint)	// only a temporary var
		//point.bars = 0.0
		//point.value = 0.0
		//addEnvelopePoint(tracks(i), toInt(point), track.count)
		//addEnvelopePoint(tracks(i), toInt(point), track\count)
		//delete point
	next i
	
	selected_track = 0
return	

main:
	
	gosub demoInit
		
	#ifdef STANDALONE
		global MUSIC_PATH$
		MUSIC_PATH = "zetaforce.mp3"
	#endif
	
	#ifdef USE_EDITOR
		selector.trackNames = gTrackNames
		chDir "../seek"
		loadToFoobar("../src/" + MUSIC_PATH)
		waitUntilConnected()
		chDir "../src"
		
	#else
		playSound MUSIC_PATH
	#endif
	
	gosub timeInit
	
	repeat
		//t# = (float(timer())-float(start_time)) / 1000.0
		gosub updateTime
		
		#ifdef USE_EDITOR
			setFont editorfont
			gosub updateEditor
			gosub updateHotkeys
			gosub draw_action_buttons
			gosub draw_editor_misc
		#endif
		
		gosub updateTracks
		
		drawToImage gBuffer
		gosub drawDemo
		drawToScreen
		
		gosub scaleBuffer
		gosub drawBuffer
		
		drawScreen
	until keyHit(cbKeyEsc)
	
	#ifdef USE_EDITOR
		if gResetFoobar then killFoobar()
	#endif
return

updateTracks:
	for i=0 to TRACK_AMOUNT
		track_values(i) = getEnvelopeValue(tracks(i), bars)
	next i
return

#ifdef USE_EDITOR
updateEditor:
	editor.track = tracks(selected_track)
	
	bars# = updateEditor(toInt(editor), bars) // the editor processes looping
	newbars# = bars
	if flag_draw_editor then
		newbars# = drawEditorTimeline(toInt(editor), bars)
	endif
	
	if newbars <> bars then
		diff# = newbars - bars
		bar_offset# = bar_offset + diff
		time_offset# = barsToSecs(bar_offset, tempo)
	endif
	
	if flag_draw_editor then
		drawEditor(toInt(editor), bars)
	endif
	
	drawTrackSelector(toInt(selector))
	selected_track = selector.selectedTrack
	
return

// we assume there exists a selected_track variable and a global tracks-array
updateHotkeys:
	if keyHit(cbKeyF6) then
		save_result = saveMultipleTracks(TRACK_AMOUNT)
		editor.status = "saved " + save_result + " tracks"
	endif
	
	if keyHit(cbKeyF9) then 
		load_result = loadMultipleTracks(TRACK_AMOUNT)
		editor.status = "loaded " + load_result + " tracks"
	endif
	
	if keyHit(cbKeyF11) then
		gSceneAmount = countFileRows(scenelistpath)
		assert(gSceneAmount > 0)
		reDim scene_names(gSceneAmount-1) as string
		reDim scene_start(gSceneAmount-1)
		loadScenes(scenelistpath)
		editor.status = "loaded " + gSceneAmount + " scenes"
	endif
		
	if keyHit(cbKeyM) then
		if muted then
			setVolume(100)
			muted = false
		else
			setVolume(0)
			muted = true
		endif
	endif
	
	// toggle editor with TAB
	if keyHit(15) then flag_draw_editor = toggle(flag_draw_editor)
	
return

draw_editor_misc:
	drawSceneMarkers(toInt(editor), bars)
	color cbwhite

	statusstr$ = editor.status
	info_x = SCREEN_WIDTH + 10
	info_y = SCREEN_HEIGHT - 150
	if muted then statusstr = statusstr + " (muted)"
	text info_x, info_y - 20, "status: " + statusstr
	text info_x, info_y - 32, "time (secs): " + t#
	text info_x, info_y - 44, "bars: " + bars#
	text info_x, info_y - 56, "FPS: " + FPS()
	text info_x, info_y - 68, "scene: " + gCurrentScene$
	
	// clear the HTTP debug text every once in a while
	if frames mod 100 = 0 or frames < 2 then 
		clearText 
		locate SCREEN_WIDTH + 10, 0
	endif
	
	if keyDown(cbKeyF1) then gosub drawHelp
return

// sori tästä tuli vähän sotkuinen
draw_action_buttons:
	buttonsize# = UI_BUTTONSTRIP_WIDTH/3
	buttonheight = 24
	buttonstrip_x = editor.x + editor.width - UI_BUTTONSTRIP_WIDTH
	buttonstrip_y = editor.y + editor.height + editor.timelineHeight
	clearbutton = textButton(buttonstrip_x + 0*buttonsize, buttonstrip_y, buttonsize, 24, "clear", false)
	savebutton  = textButton(buttonstrip_x + 1*buttonsize, buttonstrip_y, buttonsize, 24, "save",  false)
	loadbutton  = textButton(buttonstrip_x + 2*buttonsize, buttonstrip_y, buttonsize, 24, "load",  false)
	
	if clearbutton then
		if dialog(mouseX(), mouseY() - 100, "clear all points from track '" + track.name + "'?") then
			clearTrack(tracks(selected_track))
		endif
	endif
	
	if savebutton then
		trackp = tracks(selected_track)
		if trackp = UNDEFINED then	return
		
		track\SyncTrack = toType(trackp)
		if confirmDialog("save track '" + track.name + "' to "+getTrackFilename(selected_track)+"?") then
			saveTrack(tracks(selected_track), getTrackFilename(selected_track))
		endif
	endif
	
	if loadbutton then
		trackp = tracks(selected_track)
		if trackp = UNDEFINED then	return
		track\SyncTrack = toType(trackp)
		filename$ = getTrackFilename(selected_track)
		
		if confirmDialog("load track '" + track.name + "' from file "+filename$+"?") then
			load_result = loadTrack(tracks(selected_track), filename$)
			
			if load_result = 0 then
				cls 
				confirmDialog("couldn't load file: " + filename$)
			endif
		endif
	endif
return
#endif

updateTime:
	#ifdef USE_EDITOR
		gosub updateTimeHotkeys
	#endif	
	
	frames + 1
	
	if playing then
	
	else
		pause_offset# = -(timer()-pause_start)/1000.0
	endif
	
	t# = pause_offset + time_offset + float(timer() - tstart)/1000.0
	
	beats# = (t/60.0)*(tempo)
	bars# = beats/4.0 
	gCurrentScene = getCurrentScene(bars, gSceneAmount)
	tt = t
	tb = bars
return

#ifdef USE_EDITOR
updateTimeHotkeys:
	color cbSilver	// for cbNetwork error messages added with addText

	if keyHit(cbKeyBackspace) then
		time_offset = 0.0
		pause_offset = 0.0
		t# = 0.0
		pause_start = timer()
		tstart = timer()
	endif

	// PANIC button
	if keyHit(cbKeyF12) then
		stopMusic()	
		playing = false
	endif

	if keyHit(cbKeySpace) then 
		seekMusicSecs(roundDown(barsToSecs(bars, tempo)))
		togglePlaying()	// foobar command
		
		if playing then
			playing = false
			pause_start = timer()
		else
			time_offset = time_offset + pause_offset
			// snap to a full second
			time_offset = time_offset - frac(barsToSecs(bars, tempo))
			pause_offset = 0.0
			playing = true
		endif
	endif
	
	if keyDown(cbKeyRight) then
		time_offset = time_offset + SEEK_SPEED
	elseIf keyDown(cbKeyLeft) then
		time_offset = time_offset - SEEK_SPEED
	endif	
return

// saves all tracks between 0 and until_track-1
function saveMultipleTracks(until_track) 
	saved_tracks = 0
	
	for i=0 to until_track-1
		result = saveTrack(tracks(i), getTrackFilename(i))
		if result > 0 then saved_tracks = saved_tracks + 1
	next i
	
	return saved_tracks
endFunction

drawHelp:
	'cls
	clearText 
	color cbWhite
	locate 10,10
	addText "SPACE play/pause"
	addText ""
	addText "F6 save all tracks"
	addText "F9 load all tracks"
	addText "F11 reload scene markers"
	addText "WASD move ON the timeline"
	addText "    hold LSHIFT to move faster"
	addText "left and right arrow keys to skip in time"
	addText ""
	addText "M mute audio"
	addText "F12 stop audio"
	addText ""
	addText "RMB to add point"
	addText "LMB to drag points around"
	addText "    hold LCTRL to move all points to the right"
	addText "    hold LALT to disable snap to grid"
	addText "hold x and click to delete points"
	addText "    or press DEL when point is selected"
	addText ""
	addText "timeline"
	addText "skip with LMB"
	addText "hold RMB and drag from left to right to loop a section"
	addText "    click with RMB to deselect loop"
	addText "BACKSPACE skip to start"

return
#endif

// loads all track ID's between 0 and until_track-1
function loadMultipleTracks(until_track)
	loaded_tracks = 0
	for i=0 to until_track-1
		result = loadTrack(tracks(i), getTrackFilename(i))
		if result > 0 then loaded_tracks = loaded_tracks + 1
	next i
	
	return loaded_tracks
endFunction

drawBuffer:
	#ifdef USE_EDITOR
		drawImage gBuffer, 0, 0
	#else
		drawImage gBuffer, 0, (screenHeight()-PICTURE_HEIGHT)/2
	#endif
	
return

#ifdef STANDALONE
demoInit:
	// nothing here!
return

scaleBuffer:
	// no scaling
return

drawDemo:
	color 255, 0, 0
	box 0,0,640,480,1
	
	text 0,0,"THIS IS A TEST EFFECT"
	
	c = 200 * track_values(2)
	color c,c,c
	x_pos = 100 + track_values(0) * 300
	y_pos = 100 + track_values(1) * 200
	circle x_pos, y_pos, 100
	
return
#endif
