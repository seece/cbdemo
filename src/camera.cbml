'This is your first CoolBasic intro!  

@inline @
SET_CAMERA_VARS:
    @cDist#=-track_values_smooth(0)*20//15+sin(bars*360)*10
    @cAng#=track_values_smooth(1)*700//bars*90
    @cRot#=track_values_smooth(2)*700
    @cAlt#=track_values_smooth(3)*10-5
    @cPitch#=track_values_smooth(4)*700
    @cRoll#=track_values_smooth(5)*700
    @cX#=track_values_smooth(6)*50
    @cY#=track_values_smooth(7)*50
    @cZ#=track_values_smooth(8)*-50
    @cFog#=track_values(9)+0.1
    @shipX#=track_values(10)*50
    @shipY#=track_values(11)*50
    @shipZ#=track_values(12)*50
    @gRough#=track_values(13)*0.5
return


@inline _obj,@,_rendersub
RENDER_OBJECT:
    @mx=peekInt(_obj,0)
    @my=peekInt(_obj,4)
    @mz=peekInt(_obj,8)
    @size=MEMBlockSize(@mx)
    @cX#+ @shipX 
    @cY#+ @shipY
    @cZ#+ @shipZ
    for @i=0 to @size-8 step 8
        px#=peekFloat(@mx,@i)'_1_px#=peekFloat(@mx,@i)
        py#=peekFloat(@my,@i)'_1_py#=peekFloat(@my,@i)
        pz#=peekFloat(@mz,@i)'_1_pz#=peekFloat(@mz,@i)
        @i2=@i+4
        px2#=peekFloat(@mx,@i2)'_2_px#=peekFloat(@mx,@i2)
        py2#=peekFloat(@my,@i2)'_2_py#=peekFloat(@my,@i2)
        pz2#=peekFloat(@mz,@i2)'_2_pz#=peekFloat(@mz,@i2)
        'LINE_WITH_FOG(@,_1_,_2_)
        gosub _rendersub
    next @i 
return

@inline _obj,@,_rendersub,_sx,_sy,_sz
RENDER_OBJECT_SCALED:
    @mx=peekInt(_obj,0)
    @my=peekInt(_obj,4)
    @mz=peekInt(_obj,8)
    @size=MEMBlockSize(@mx)
    @cX#+ @shipX 
    @cY#+ @shipY
    @cZ#+ @shipZ
    for @i=0 to @size-8 step 8
        px#=peekFloat(@mx,@i)*_sx
        py#=peekFloat(@my,@i)*_sy
        pz#=peekFloat(@mz,@i)*_sz
        @i2=@i+4
        px2#=peekFloat(@mx,@i2)*_sx
        py2#=peekFloat(@my,@i2)*_sy
        pz2#=peekFloat(@mz,@i2)*_sz
        gosub _rendersub
    next @i 
return

//camera namespace, prefix for the output point, prefix for the input point
@inline @,@@,@@@
KAMERA:
    //rotate around origin and translate back
    @@px#= @@@px#+cos(@cAng#-90)*@cDist#+@cX#
    @@pz#= @@@pz#-sin(@cAng#-90)*@cDist#+@cZ#
    @@py#= @@@py#+@cAlt#+@cY#
    @a#=-getAngle(0,0, @@px#, @@pz#)
    @d#=-distance(0,0, @@px#, @@pz#)
    @@px#=cos(@a#+@cAng#)*@d#
    @@pz#=-sin(@a#+@cAng#)*@d#
    //rotate camera
    @a#=getAngle(0,0, @@px#, @@pz#)
    @d#=distance(0,0, @@px#, @@pz#)
    @@px#=cos(@a#+@cRot#)*@d#
    @@pz#=-sin(@a#+@cRot#)*@d#
    //pitch
    @a#=getAngle(0,0, @@pz#, @@py#)
    @d#=distance(0,0, @@pz#, @@py#)
    @@pz#=cos(@a#+@cPitch#)*@d#
    @@py#=-sin(@a#+@cPitch#)*@d#
    //roll
    @a#=getAngle(0,0, @@px#, @@py#)
    @d#=distance(0,0, @@px#, @@py#)
    @@px#=cos(@a#+@cRoll#)*@d#
    @@py#=-sin(@a#+@cRoll#)*@d#
return

@inline @,@@
_DOT:
    KAMERA(@,@@,@@)
    color 200,200,200
    pd#=A_DIST(@@px#,@@py#,@@pz#)
    dot @@px/@@pd*180.0+160,@@py/@@pd*180.0+90
return

//camera namespace, prefix for point 1, prefix for point 2
@inline @,@@,@@@
LINE_WITH_FOG:
    KAMERA(@,lwft1_,@@)//calculate new points and tell how to prefix them
    KAMERA(@,lwft2_,@@@)
    pd#= A_DIST(lwft1_px#,lwft1_py#,lwft1_pz#)
    pd2#= A_DIST(lwft2_px#,lwft2_py#,lwft2_pz#)
    _d#=(pd+pd2)*2.0*@cFog
    color a_clampc(200/_d*2-_d),a_clampc(@g/_d*2-_d),a_clampc(@b/_d*2-_d)
    if lwft1_pz<0.2 and lwft2_pz<0.2 then line lwft1_px/pd#*180.0+160,lwft1_py/pd#*180.0+90,lwft2_px/pd2#*180.0+160,lwft2_py/pd2#*180.0+90
return

// fisheyee distance
//syntax fails here. plain macros need their own way. TODO
@inline __px,__py,__pz
A_DIST:
    (sqrt(( __px)^2+( __py)^2+( __pz)^2))
return

@inline _linemacro
A_SMART_LINE_MAKRO:
    _px#=px//do this just to avoid another copy of camera function
    _py#=py
    _pz#=pz
    _s_d#=a_dist(px-px2,py-py2,pz-pz2)*6.0
    px#=(px#+px2#)/2.0
    py#=(py#+py2#)/2.0
    pz#=(pz#+pz2#)/2.0
    gosub a_kamera
    _s_d=roundup(_s_d/(a_dist(px,py,pz)^2*0.2+0.5)+1)

    if _s_d>1 then
        _dx#=(px2-_px)/_s_d
        _dy#=(py2-_py)/_s_d
        _dz#=(pz2-_pz)/_s_d
        _s_px#=_px
        _s_py#=_py
        _s_pz#=_pz
        for _s_i=1 to _s_d-1
            _px2#=_s_px+_dx*_s_i
            _py2#=_s_py+_dy*_s_i
            _pz2#=_s_pz+_dz*_s_i
            _s_i2=_s_i+1
            gosub _s_a_temple_line_with_fog
            _px=_s_px+_dx*_s_i2
            _py=_s_py+_dy*_s_i2
            _pz=_s_pz+_dz*_s_i2
            gosub _s_a_temple_line_with_fog
        next _s_i
    
    else
        px=_px
        py=_py
        pz=_pz
        gosub temple_line_with_fog
    endif
    
return

@inline @
LINE_WITH_FOG_MAKRO:
	pd#=a_dist(@px#,@py#,@pz#)
	pd2#=a_dist(px2#,py2#,pz2#)
	_d#=(pd+pd2)*2.0*a_cFog
	color a_clampc(a_r/_d*2-_d),a_clampc(a_g/_d*2-_d),a_clampc(a_b/_d*2-_d)
	if @pz<0.2 and pz2<0.2 then line @px/pd#*180.0+160,@py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90
return

//requires stdlib.cbpp
//used in temple scene
@inline @
LINE_WITH_FOG_GRADIENT_MAKRO:
	pd#=a_dist(@px#,@py#,@pz#)
	pd2#=a_dist(px2#,py2#,pz2#)
	_d#=(pd+pd2)*2.0*a_cFog
	//color a_clampc(a_r/_d*2-_d),a_clampc(a_g/_d*2-_d),a_clampc(a_b/_d*2-_d)
	color a_clampc(a_r/_d*2-_d),a_clampc(lerp(a_g, 200, @py/8.0)/_d*2-_d),a_clampc(a_b/_d*2-_d)
	if @pz<0.2 and pz2<0.2 then line @px/pd#*180.0+160,@py/pd#*180.0+90,px2/pd2#*180.0+160,py2/pd2#*180.0+90
return

@inline @
TEMPLE_SMART_LINE_MAKRO:
    _px#=px//do this just to avoid another copy of camera function
    _py#=py
    _pz#=pz
    _s_d#=a_dist(px-px2,py-py2,pz-pz2)*6.0
    px#=(px#+px2#)/2.0
    py#=(py#+py2#)/2.0
    pz#=(pz#+pz2#)/2.0
    gosub a_kamera
    _s_d=roundup(_s_d/(a_dist(px,py,pz)^2*0.2+0.5)+1)

    if _s_d>1 then
        _dx#=(px2-_px)/_s_d
        _dy#=(py2-_py)/_s_d
        _dz#=(pz2-_pz)/_s_d
        _s_px#=_px
        _s_py#=_py
        _s_pz#=_pz
        for _s_i=1 to _s_d-1
            _px2#=_s_px+_dx*_s_i
            _py2#=_s_py+_dy*_s_i
            _pz2#=_s_pz+_dz*_s_i
            _s_i2=_s_i+1
            gosub _s_a_line_with_fog
            _px=_s_px+_dx*_s_i2
            _py=_s_py+_dy*_s_i2
            _pz=_s_pz+_dz*_s_i2
            gosub _s_a_line_with_fog
        next _s_i
    
    else
        px=_px
        py=_py
        pz=_pz
        gosub a_line_with_fog
    endif
    
return
